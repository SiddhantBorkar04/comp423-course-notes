{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Siddhant's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<p>Primary author: Siddhant Borkar (https://github.com/SiddhantBorkar04)</p> <p>This tutorial will guide you through setting up a DevContainer and creating a basic Rust program. With DevContainers, you don\u2019t need Rust installed on your computer since everything runs in an isolated environment.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#before-we-dive-in-make-sure-you-have","title":"Before we dive in, make sure you have:","text":"<p>(1) A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</p> <p>(2) Git installed: Install Git if you don\u2019t already have it.</p> <p>(3) Visual Studio Code (VS Code): Download and install it from here.</p> <p>(4) Docker installed: Required to run the dev container. Get Docker here.</p> <p>(5) Command-line basics: Your COMP211 command-line knowledge will serve you well here. If in doubt, review the Learn a CLI text!</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#part-1-initialization-and-setup","title":"Part 1: Initialization and Setup","text":""},{"location":"tutorials/docs/tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a Local Directory and Initialize Git","text":"<p>(1) Open your terminal or command prompt.</p> <p>(2) Create a new directory for your project and navigate to it: <pre><code>mkdir rust-tutorial\ncd rust-tutorial\n</code></pre></p> <p>(3) Initialize a new Git repository: <pre><code>git init\n</code></pre></p> <p>(4) Create a README.md file with a link to this tutorial: <pre><code>echo \"# Rust Tutorial\" &gt; README.md\necho \"Link to tutorial: https://SiddhantBorkar04.github.io/comp423-course-notes/tutorials/docs/tutorials/rust-setup/\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/docs/tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and create a new repository: Repository Name: comp423-rust-tutorial Description: \"Hello World in Rust\" Visibility: Public</p> <p>(2) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(3) Click Create Repository.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link Your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-rust-tutorial.git\n</code></pre> Obviously, make sure to replace  with your GitHub username. <p>(2) Rename your default branch to main (if it isn\u2019t already): <pre><code>git branch -M main\n</code></pre></p> <p>(3) Push your local commits to GitHub: <pre><code>git push --set-upstream origin main\n</code></pre></p>"},{"location":"tutorials/docs/tutorials/rust-setup/#part-2-setting-up-the-devcontainer","title":"Part 2: Setting up the DevContainer","text":""},{"location":"tutorials/docs/tutorials/rust-setup/#step-1-add-devcontainer-configuration","title":"Step 1: Add DevContainer Configuration","text":"<p>(1) Open the rust-tutorial directory in VS Code (File &gt; Open Folder).</p> <p>(2) Install the Dev Containers extension for VS Code.</p> <p>(3) Create a .devcontainer directory in your project with the file devcontainer.json: <pre><code>mkdir .devcontainer\n</code></pre></p> <p>(4) Add the following configuration to devcontainer.json: <pre><code>{\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:0-1\",\n    \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n    ],\n    \"settings\": {}\n}\n</code></pre></p>"},{"location":"tutorials/docs/tutorials/rust-setup/#step-2-reopen-the-project-in-a-vscode-devcontainer","title":"Step 2: Reopen the Project in a VSCode DevContainer","text":"<p>(1) Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), type \"Dev Containers: Reopen in Container,\" and select it.</p> <p>(2) Wait for the container to build and set up (this might take a few minutes).</p> <p>(3) Verify the Rust installation by checking its version in the terminal: <pre><code>rustc --version\n</code></pre> You should see the installed version of Rust displayed.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#part-3-creating-hello-world-in-rust","title":"Part 3: Creating Hello World in Rust","text":""},{"location":"tutorials/docs/tutorials/rust-setup/#step-1-initialize-a-rust-project","title":"Step 1: Initialize a Rust Project","text":"<p>(1) Use the cargo new command to create a new binary project without initializing another Git repository: <pre><code>cargo new --vcs none .\n</code></pre></p> <p>(2) This creates a src/main.rs file with a basic structure and sets up the necessary project files.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#step-2-code-hello-world","title":"Step 2: Code Hello World","text":"<p>(1) Open the src/main.rs file in VS Code.</p> <p>(2) Replace its contents with the following code: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p>"},{"location":"tutorials/docs/tutorials/rust-setup/#step-3-build-and-run-your-program","title":"Step 3: Build and Run Your Program","text":""},{"location":"tutorials/docs/tutorials/rust-setup/#using-cargo-run-build-execute","title":"Using cargo run (Build + Execute)","text":"<p>The cargo run command compiles and executes the program in one step, making it ideal for quick testing.</p> <p>(1) Compile and execute the program in one step with: <pre><code>cargo run\n</code></pre></p> <p>(2) This command compiles the source code into a binary and immediately runs it. You should see Hello COMP423 printed in the terminal.</p>"},{"location":"tutorials/docs/tutorials/rust-setup/#using-cargo-build-build-only","title":"Using cargo build (Build Only)","text":"<p>The cargo build command compiles the program without executing it, which is useful when preparing a binary for deployment. </p> <p>Note</p> <p>This is similar to the gcc command where you compile the code into an a.out file and run it manually.</p> <p>(1) Compile your program into a standalone binary with:</p> <p>(2) This creates an executable binary in the target/debug directory</p> <p>(3) Run the compiled binary directly: <pre><code>./target/debug/rust-tutorial\n</code></pre></p>"},{"location":"tutorials/docs/tutorials/rust-setup/#part-4-push-to-github","title":"Part 4: Push to GitHub","text":"<p>(1) Stage and commit your changes: <pre><code>git add .\ngit commit -m \"Hello World Program\"\n</code></pre></p> <p>(2) Push the changes to your GitHub repository: <pre><code>git push origin main\n</code></pre></p> <p>You\u2019ve successfully created and run a basic Rust Hello World program using a DevContainer. Congratulations on completing this tutorial!</p>"}]}